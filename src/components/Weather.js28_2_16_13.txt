import React, { useState, useEffect } from "react";

const Weather = () => {
  const [weatherData, setWeatherData] = useState(null);
  const [forecastData, setForecastData] = useState([]);
  const [error, setError] = useState(null);
  const [searchLocation, setSearchLocation] = useState("");
  const [currentIndex, setCurrentIndex] = useState(0);

  const fetchWeather = async (query) => {
    try {
      console.log("🔍 Lähetetään sääpyyntö backendille:", query);

      const weatherResponse = await fetch(`http://localhost:8000/fishing/weather/${query}/`);
      if (!weatherResponse.ok) throw new Error("Virhe haettaessa säätietoja");
      const weatherData = await weatherResponse.json();

      console.log("✅ Nykyinen sää JSON:", weatherData);
      if (!weatherData || !weatherData.sää) throw new Error("Säädatan haku epäonnistui");

      setWeatherData(weatherData);

      const forecastResponse = await fetch(`http://localhost:8000/fishing/forecast/${query}/`);
      if (!forecastResponse.ok) throw new Error("Virhe haettaessa sääennustetta");
      const forecastData = await forecastResponse.json();

      console.log("✅ Ennuste JSON:", forecastData);
      if (!forecastData || !forecastData.ennuste) throw new Error("Sääennusteen haku epäonnistui");

      // 🛠️ Järjestetään ennuste päivämäärän mukaan (jos JSON antaa ne väärässä järjestyksessä)
      const sortedForecast = forecastData.ennuste.sort((a, b) => new Date(a.päivämäärä) - new Date(b.päivämäärä));

      // 🛠️ Poistetaan duplikaatit ja yhdistetään saman päivän tiedot keskiarvoksi
      const processedForecast = sortedForecast.reduce((acc, item) => {
        const existing = acc.find(f => f.päivämäärä === item.päivämäärä);
        if (existing) {
          existing.lämpötila = (existing.lämpötila + item.lämpötila) / 2;
        } else {
          acc.push(item);
        }
        return acc;
      }, []);

      setForecastData(processedForecast);
      setCurrentIndex(0);
    } catch (error) {
      console.error("❌ Virhe haettaessa säätietoja:", error);
      setError(error.message || "Tuntematon virhe");
    }
  };

  const handleSearch = () => {
    if (searchLocation) {
      setWeatherData(null);
      setForecastData([]);
      setCurrentIndex(0);
      fetchWeather(searchLocation);
    }
  };

useEffect(() => {
  fetchWeather("Helsinki");
}, []);



const nextDay = () => {
  setCurrentIndex((prevIndex) => {
    const newIndex = Math.min(prevIndex + 1, forecastData.length - 1);
    console.log("➡ Seuraava päivä:", forecastData[newIndex]?.päivämäärä);
    return newIndex;
  });
};

const prevDay = () => {
  setCurrentIndex((prevIndex) => {
    const newIndex = Math.max(prevIndex - 1, 0);
    console.log("⬅ Edellinen päivä:", forecastData[newIndex]?.päivämäärä);
    return newIndex;
  });
};

  if (error) {
    return <p style={{ color: "red" }}>{error}</p>;
  }

  if (!weatherData) {
    return <p>Ladataan säätietoja...</p>;
  }

  return (
    <div>
      <h2>Sääennuste: {weatherData.kaupunki}</h2>
      <p>Lämpötila: {weatherData.lämpötila}°C</p>
      <p>Tuntuu kuin: {weatherData.tuntuu_kuin}°C</p>
      <p>Ilmanpaine: {weatherData.ilmanpaine} hPa</p>
      <p>Kosteus: {weatherData.kosteus}%</p>
      <p>Tuuli: {weatherData.tuuli_nopeus} m/s, suunta {weatherData.tuuli_suunta}°</p>
      <p><strong>Sää:</strong> {weatherData.sää}</p>

      {/* 🔍 Haku */}
      <input
        type="text"
        placeholder="Hae kaupunki..."
        value={searchLocation}
        onChange={(e) => setSearchLocation(e.target.value)}
        onKeyDown={(e) => e.key === "Enter" && handleSearch()}
      />
      <button onClick={handleSearch}>Hae</button>

      {/* 🔥 6 päivän ennuste vieritettävänä */}
      {forecastData.length > 0 && (
        <div>
          <h3>Päivämäärä: {forecastData[currentIndex]?.päivämäärä}</h3>
          <p>Lämpötila: {forecastData[currentIndex]?.lämpötila.toFixed(1)}°C</p>
          <p>Sää: {forecastData[currentIndex]?.sää}</p>

          <button onClick={prevDay} disabled={currentIndex === 0}>← Edellinen</button>
          <button onClick={nextDay} disabled={currentIndex === forecastData.length - 1}>Seuraava →</button>
        </div>
      )}
    </div>
  );
};

export default Weather;



